import numpy as np; from numpy import *

import matplotlib.pyplot as plt; from matplotlib.pyplot import *i


def HistogramPlot ( H2Xs, OutputFile,Min = -18, Max = 18 ):
# nie jestem pewien gdzie histogram, daje biny; musialbym sprawdzic ...


#"""
#Make a histogram of normally distributed random numbers and plot the
#analytic PDF over it
#"""

#    mu, sigma = 100, 15
#    x = mu + sigma * np.random.randn(10000)

    fig = plt.figure()
    ax  = fig.add_subplot(111)

#    H2Xs = array ( H1H2H3Array [:,2] )

# the histogram of the data
#    n, bins, patches = ax.hist(H2Xs, 50, normed=1, facecolor='green', alpha=0.75)

    min_H2Xs = min ( H2Xs ); max_H2Xs = max ( H2Xs );

    numBins = 5
#    print H2Xs


#    bins = np.linspace( min_H2Xs, max_H2Xs, 18 ) #int ( max_H2Xs - min_H2Xs ) * 2.0 )

    bins = np.linspace( Min, Max, 37)# (Max-Min) + 1 );

    lista = [ 1, 2, 50, 30 ]
    Array = np.array ( H2Xs )

    ax.hist( Array ,bins)#color='green',alpha=0.8)

# hist uses np.histogram under the hood to create 'n' and 'bins'.
# np.histogram returns the bin edges, so there will be 50 probability
# density values in n, 51 bin edges in bins and 50 patches.  To get
# everything lined up, we'll compute the bin centers
#    bincenters = 0.5*(bins[1:]+bins[:-1])
# add a 'best fit' line for the normal PDF
#    y = mlab.normpdf( bincenters, 0, 100)
#    y = n
#    l = ax.plot(bincenters, y, 'r--', linewidth=1)

#    ax.set_xlabel('Smarts')
#    ax.set_ylabel('Probability')
#ax.set_title(r'$\mathrm{Histogram\ of\ IQ:}\ \mu=100,\ \sigma=15$')
#    ax.set_xlim(40, 160)
#    ax.set_ylim(0, 0.03)
#    ax.grid(True)

#    plt.show()

    plt.savefig(OutputFile ,dpi=300)
